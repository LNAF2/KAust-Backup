---
description: 
globs: 
alwaysApply: true
---
# Minimized State Rule

This rule enforces proper handling of application state when minimized.

<rule>
name: minimized-state
description: Enforce proper handling of application minimized state
message: Application minimized state must be handled appropriately
severity: warning
languages: [swift]

patterns:
  - pattern: |
      class $CLASS: UIViewController {
          override func viewDidDisappear($BOOL) {
              super.viewDidDisappear($BOOL)
          }
      }
    message: "View disappearance should handle state preservation appropriately."

  - pattern: |
      class $CLASS: UIViewController {
          override func viewWillDisappear($BOOL) {
              super.viewWillDisappear($BOOL)
          }
      }
    message: "Prepare for view disappearance by saving state and cleaning up resources."

examples:
  - name: Good Example
    code: |
      class ContentViewController: UIViewController {
          private var stateManager: StateManaging
          private var backgroundTask: UIBackgroundTaskIdentifier = .invalid
          
          init(stateManager: StateManaging) {
              self.stateManager = stateManager
              super.init(nibName: nil, bundle: nil)
          }
          
          required init?(coder: NSCoder) {
              fatalError("init(coder:) has not been implemented")
          }
          
          override func viewWillDisappear(_ animated: Bool) {
              super.viewWillDisappear(animated)
              saveState()
              startBackgroundTaskIfNeeded()
          }
          
          override func viewDidDisappear(_ animated: Bool) {
              super.viewDidDisappear(animated)
              cleanupResources()
          }
          
          private func saveState() {
              stateManager.saveCurrentState()
          }
          
          private func startBackgroundTaskIfNeeded() {
              backgroundTask = UIApplication.shared.beginBackgroundTask { [weak self] in
                  self?.endBackgroundTask()
              }
          }
          
          private func cleanupResources() {
              // Clean up any resources that aren't needed while minimized
              endBackgroundTask()
          }
          
          private func endBackgroundTask() {
              if backgroundTask != .invalid {
                  UIApplication.shared.endBackgroundTask(backgroundTask)
                  backgroundTask = .invalid
              }
          }
      }

  - name: Bad Example
    code: |
      class BadViewController: UIViewController {
          var importantData: Data?
          
          override func viewWillDisappear(_ animated: Bool) {
              super.viewWillDisappear(animated)
              // Bad: No state preservation
              // Bad: No resource cleanup
          }
          
          override func viewDidDisappear(_ animated: Bool) {
              super.viewDidDisappear(animated)
              // Bad: Data might be lost when app is minimized
          }
      }
</rule>

## Guidelines
1. Save important state before minimization
2. Clean up resources appropriately
3. Handle background tasks properly
4. Preserve user input and progress
5. Implement state restoration
6. Handle memory warnings
7. Save context for Core Data
8. Cancel ongoing operations if needed
9. Update UI state appropriately
10. Handle network connections properly
