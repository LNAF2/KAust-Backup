---
description: 
globs: *.swift
alwaysApply: false
---
# Purple for Playlist Rule

This rule enforces consistent purple color usage for playlist elements in the UI.

<rule>
name: purple-for-playlist
description: Enforce consistent purple color usage for playlists
message: Playlist elements must use the defined purple color scheme
severity: warning
languages: [swift]
files:
  - "**/*Playlist*.swift"
  - "**/*PlayList*.swift"
  - "**/Playlist/**/*.swift"
  - "**/Views/Playlist/**/*.swift"
  - "**/Features/Playlist/**/*.swift"
  - "**/Components/Playlist/**/*.swift"
  - "**/*PlaylistView.swift"
  - "**/*PlaylistCell.swift"
  - "**/*PlaylistRow.swift"
  - "**/*PlaylistList.swift"
  - "**/*PlaylistGrid.swift"
  - "**/*PlaylistDetail.swift"

patterns:
  - pattern: |
      struct $VIEW: View {
          var body: some View {
              List {
                  ForEach($PLAYLISTS) { $PLAYLIST in
                      // Content without purple theme
                  }
              }
          }
      }
    message: "Playlist view should use the defined purple color scheme."

  - pattern: |
      Color($COLOR_NAME)
    message: "Use the predefined .playlistPurple color for playlist elements."

examples:
  - name: Good Example
    code: |
      // Define the standard purple colors
      extension Color {
          static let playlistPurple = Color(red: 147/255, green: 112/255, blue: 219/255)
          static let playlistPurpleLight = Color(red: 171/255, green: 146/255, blue: 229/255)
      }
      
      // Playlist with proper purple theme
      struct PlaylistView: View {
          let playlists: [Playlist]
          
          var body: some View {
              List(playlists) { playlist in
                  PlaylistRowView(playlist: playlist)
                      .listRowBackground(Color.playlistPurple.opacity(0.1))
              }
              .background(Color.playlistPurple.opacity(0.05))
              .tint(Color.playlistPurple)
          }
      }
      
      struct PlaylistRowView: View {
          let playlist: Playlist
          
          var body: some View {
              HStack {
                  Image(systemName: "music.note.list")
                      .foregroundColor(Color.playlistPurple)
                  
                  VStack(alignment: .leading) {
                      Text(playlist.name)
                          .foregroundColor(Color.playlistPurple)
                      Text("\(playlist.songCount) songs")
                          .foregroundColor(Color.playlistPurpleLight)
                  }
              }
          }
      }

  - name: Bad Example
    code: |
      // Bad: Inconsistent or missing purple theme
      struct PlaylistView: View {
          let playlists: [Playlist]
          
          var body: some View {
              List(playlists) { playlist in
                  HStack {
                      Image(systemName: "music.note.list")
                          .foregroundColor(.red)  // Wrong color
                      
                      VStack(alignment: .leading) {
                          Text(playlist.name)
                              .foregroundColor(.primary)  // Missing theme color
                          Text("\(playlist.songCount) songs")
                              .foregroundColor(.secondary)  // Missing theme color
                      }
                  }
                  .listRowBackground(Color.gray.opacity(0.1))  // Wrong color
              }
          }
      }
</rule>

## Guidelines
1. Use predefined purple color constants
2. Apply purple theme to list backgrounds
3. Use purple tint for interactive elements
4. Apply purple theme to text elements
5. Maintain consistent opacity levels
6. Use lighter purple for secondary elements
7. Ensure sufficient contrast with text
8. Apply purple accents to icons
9. Use purple for selection states
10. Maintain color harmony with other UI elements

