---
description: 
globs: *.swift
alwaysApply: false
---
# Proportional Dimensions Rule

This rule enforces the use of proportional dimensions for responsive layouts.

<rule>
name: proportional-dimensions
description: Enforce proportional dimensions for responsive layouts
message: Use proportional dimensions instead of fixed values
severity: warning
languages: [swift]
files:
  - "*View.swift"
  - "*Screen.swift"
  - "*Layout*.swift"
  - "*Container*.swift"
  - "*Panel*.swift"

patterns:
  - pattern: |
      .frame(width: $NUMBER)
    message: "Use proportional width instead of fixed value."

  - pattern: |
      .frame(height: $NUMBER)
    message: "Use proportional height instead of fixed value."

examples:
  - name: Good Example
    code: |
      struct ResponsiveLayout: View {
          let spacing: CGFloat = 16
          
          var body: some View {
              GeometryReader { geometry in
                  let width = geometry.size.width
                  let height = geometry.size.height
                  
                  HStack(spacing: spacing) {
                      // Left panel takes 30% of width
                      SidebarView()
                          .frame(width: width * 0.3)
                      
                      VStack(spacing: spacing) {
                          // Header takes 20% of height
                          HeaderView()
                              .frame(height: height * 0.2)
                          
                          // Content area fills remaining space
                          ScrollView {
                              VStack(spacing: spacing) {
                                  // Cards take 45% of container width each
                                  let cardWidth = (width * 0.7 - spacing * 3) * 0.45
                                  
                                  LazyVGrid(
                                      columns: [
                                          GridItem(.fixed(cardWidth)),
                                          GridItem(.fixed(cardWidth))
                                      ],
                                      spacing: spacing
                                  ) {
                                      ForEach(items) { item in
                                          CardView(item: item)
                                              // Card height is proportional to width
                                              .frame(height: cardWidth * 0.75)
                                      }
                                  }
                              }
                              .padding(spacing)
                          }
                      }
                  }
              }
          }
      }
      
      struct AdaptiveImageView: View {
          let image: Image
          
          var body: some View {
              GeometryReader { geometry in
                  image
                      .resizable()
                      .aspectRatio(contentMode: .fill)
                      // Image takes 80% of container width
                      .frame(
                          width: geometry.size.width * 0.8,
                          // Height is proportional to width for consistent aspect ratio
                          height: geometry.size.width * 0.8 * 9/16
                      )
                      .clipShape(RoundedRectangle(cornerRadius: 8))
                      // Center in container
                      .frame(
                          maxWidth: .infinity,
                          maxHeight: .infinity,
                          alignment: .center
                      )
              }
          }
      }

  - name: Bad Example
    code: |
      // Bad: Fixed dimensions
      struct NonResponsiveLayout: View {
          var body: some View {
              HStack(spacing: 16) {
                  SidebarView()
                      .frame(width: 280)  // Bad: Fixed width
                  
                  VStack(spacing: 16) {
                      HeaderView()
                          .frame(height: 120)  // Bad: Fixed height
                      
                      ScrollView {
                          LazyVGrid(
                              columns: [
                                  GridItem(.fixed(200)),  // Bad: Fixed column width
                                  GridItem(.fixed(200))
                              ],
                              spacing: 16
                          ) {
                              ForEach(items) { item in
                                  CardView(item: item)
                                      .frame(height: 150)  // Bad: Fixed height
                              }
                          }
                      }
                  }
              }
          }
      }
      
      // Bad: Fixed image dimensions
      struct NonResponsiveImageView: View {
          let image: Image
          
          var body: some View {
              image
                  .resizable()
                  .frame(width: 320, height: 180)  // Bad: Fixed dimensions
                  .clipShape(RoundedRectangle(cornerRadius: 8))
          }
      }
</rule>

## Guidelines
1. Use relative sizing with multipliers
2. Calculate dimensions based on container
3. Maintain aspect ratios
4. Use flexible spacing
5. Consider device sizes
6. Handle orientation changes
7. Implement responsive grids
8. Use dynamic typography
9. Test on various devices
10. Document layout proportions
